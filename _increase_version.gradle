/**
 * _increase_version.gradle
 *   Author: Hedzr Yeh
 *  Version: v1.2.1
 *
 * Usage
 * ------------
 * Insert the following lines to the top of `build.gradle` of your module:
 *
 * ```gradle
 * apply from: rootProject.file('_increase_version.gradle').path
 * ```
 *
 * And sync the whole project right now.
 * A new file `version.properties` will be created if not exists.
 *
 * Once synchronized, build number of VERSION_CODE would be increased. A sample of `version.properties`:
 *
 * ```properties
 * VERSION_NAME=1.3.12
 * VERSION_CODE=1031200023
 * ```
 *
 * Version Format: `major.minor.patch.build`
 *
 * - Increases major number: `./gradlew incVersionsMajor`
 * - Increases minor number: `./gradlew incVersionsMinor`
 * - Increases release/patch number: `./gradlew incVersionsRelease`
 * - Increases build number: `./gradlew incVersions`
 *
 * Bonus
 * -----------
 * Generally, you could add more lines into the `build.gradle`:
 *
 * ```gradle
 *  static def buildTime() { return new Date().format("yyyy-MM-dd HH:mm:ss.SSSSZ", TimeZone.getTimeZone("UTC")) }
 *  static def buildTimeSafe() { return new Date().format("yyyyMMdd", TimeZone.getTimeZone("UTC")) }
 *  def getGitVersion() { return 'git rev-parse HEAD'.execute([], project.rootDir).text.trim() }
 *  def lite() { return project.hasProperty('CODE_LITE') ? project.CODE_LITE : 'false' }
 * ```
 *
 * Its could be used at defaultConfig chapter, such as:
 *
 * ```gradle
 *  buildConfigField "String", "GIT_SHA", "\"${getGitVersion()}\""
 *  buildConfigField "String", "BUILD_TIME", "\"${buildTime()}\""
 *  buildConfigField "String", "CODE_NAME", "\"${project.CODE_NAME}\""
 *  buildConfigField "String", "CODE_LITE", "\"${lite()}\""
 *
 *  buildConfigField "String", "GH_CLIENT_ID", "\"${GH_CLIENT_ID}\""
 *  buildConfigField "String", "GH_CLIENT_SECRET", "\"${GH_CLIENT_SECRET}\""
 * ```
 *
 */
def incVersionCore(buildOrMinor, clearBuild) {
    // loading the module's gradle.properties
    def versionPropsFile = project.file('version.properties')
    System.out.println("[trying properties] " + versionPropsFile)

    if (!versionPropsFile.canRead()) {
        // use project's gradle.properties file while module's not exists
        //versionPropsFile = rootProject.file('gradle.properties')
        //System.out.println("[and trying properties] " + versionPropsFile)
        if (project.file('version.properties').createNewFile()) {
            versionPropsFile = project.file('version.properties')
            Integer codeNew = Integer.parseInt(project.VERSION_CODE)
            if (codeNew == 0) codeNew = 1010100001
            def nameNew = (codeNew / 1000000000).longValue().toString() + '.' +
                ((codeNew % 1000000000) / 10000000).longValue().toString() + '.' +
                ((codeNew % 10000000) / 100000).longValue().toString()
            def versionProps = new Properties()
            versionProps['VERSION_CODE'] = codeNew.toString()
            versionProps['VERSION_NAME'] = nameNew
            project.VERSION_CODE = codeNew.toString()
            project.VERSION_NAME = nameNew
            versionProps.store(versionPropsFile.newWriter(), null)
        }
        versionPropsFile = project.file('version.properties')
    }

    if (versionPropsFile.canRead()) {
        def versionProps = new Properties()

        versionProps.load(new FileInputStream(versionPropsFile))

        Integer code = versionProps['VERSION_CODE'].toLong()
        Integer codeNew = code + buildOrMinor
        if (clearBuild) {
            Integer b = ((codeNew % 10000000) / 100000)
            codeNew -= (b * 100000)
        }
        def name = versionProps['VERSION_NAME']
        def nameNew = (codeNew / 1000000000).longValue().toString() + '.' +
            ((codeNew % 1000000000) / 10000000).longValue().toString() + '.' +
            ((codeNew % 10000000) / 100000).longValue().toString()

        versionProps['VERSION_CODE'] = codeNew.toString()
        versionProps['VERSION_NAME'] = nameNew
        project.VERSION_CODE = codeNew.toString()
        project.VERSION_NAME = nameNew
        versionProps.store(versionPropsFile.newWriter(), null)

        System.out.println("Incrementing Version Name: " + name + " ==> " + nameNew)
        System.out.println("Incrementing Version Code: " + code + " ==>" + codeNew)
    } else {
        throw new GradleException("Could not read gradle.properties!")
    }
}

static def buildTime() { return new Date().format("yyyy-MM-dd HH:mm:ss.SSSSZ", TimeZone.getTimeZone("UTC")) }

def getGitVersion() { return 'git rev-parse HEAD'.execute([], project.rootDir).text.trim() }

def defaultBuildConfigFields() {
    buildConfigField "String", "WXAPPID", "\"${project.WXSDKAPPID}\""
    buildConfigField "String", "WXSECRETID", "\"${project.WXSDKSECRETID}\""
    buildConfigField "String", "UNIONPAYTYPE", "\"${project.UNIONPAYTYPE}\""
}

task('incVersions') {
    doLast {
        incVersionCore(1, false)
    }
}

task('incVersionsBuild') {
    doLast {
        incVersionCore(1, false)
    }
}

task('incRelease') {
    doLast {
        incVersionCore(100000, false)
    }
}

task('incVersionsRelease') {
    doLast {
        incVersionCore(100000, false)
    }
}

task('incVersionsMinor') {
    doLast {
        incVersionCore(10000000, true)
    }
}

task('incVersionsMajor') {
    doLast {
        incVersionCore(1000000000, true)
    }
}


def incrementedBuild = project.hasProperty("INCREMENTED_BUILD") ? project.INCREMENTED_BUILD : false
def incrementedRelease = project.hasProperty("INCREMENTED_RELEASE") ? project.INCREMENTED_RELEASE : true

tasks.whenTaskAdded { task ->
    System.out.println("task.name: " + task.name + ", incrementedRelease: " + incrementedRelease + ", incrementedBuild: " + incrementedBuild)

    if (task.name.contains('AndroidTest')) {
        task.enabled = false
    }

    if (!incrementedBuild && task.name.matches('generate.*?DebugBuildConfig')) {
        System.out.println("incVersionsBuild")
        task.dependsOn 'incVersionsBuild'
        incrementedBuild = true
        return
    }

    if (!incrementedRelease && task.name.matches('generate.*?ReleaseBuildConfig')) {
        System.out.println("incVersionsRelease")
        task.dependsOn 'incVersionsRelease'
        incrementedRelease = true
        return
    }

}

